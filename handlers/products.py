from aiogram import Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.db import AsyncSessionLocal
from database.models import Product, Cart
from sqlalchemy import select
from aiogram.filters import Command
from aiogram.types import InputMediaPhoto
from google_sheets import add_order, remove_order

 # --- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã ---



# --- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã ---
router = Router()

class CartForm(StatesGroup):
    fio = State()
    phone = State()

PRODUCTS_PAGE_SIZE = 1
CART_PAGE_SIZE = 1
AVAILABLE_SIZES = ['s', 'm', 'l', 'xl', '2xl']

@router.message(lambda msg: msg.text == 'üõçÔ∏è –¢–æ–≤–∞—Ä—ã')
async def show_products(message: types.Message, state: FSMContext):
    page = 0
    user_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Product).offset(page * PRODUCTS_PAGE_SIZE).limit(PRODUCTS_PAGE_SIZE))
        products = result.scalars().all()
        if not products:
            await message.answer('–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
            return
        product = products[0]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_result = await session.execute(select(Cart).where(Cart.user_id == user_id, Cart.product_id == product.id))
        in_cart = cart_result.scalar_one_or_none() is not None
        builder = InlineKeyboardBuilder()
        builder.button(text='‚¨ÖÔ∏è', callback_data=f'prev_{page}')
        if in_cart:
            builder.button(text='‚ùå', callback_data=f'remove_{product.id}_{page}')
        else:
            builder.button(text='‚úÖ', callback_data=f'add_{product.id}_{page}')
        builder.button(text='‚û°Ô∏è', callback_data=f'next_{page}')
        builder.adjust(3)
        builder.row(types.InlineKeyboardButton(text='–†–∞–∑–º–µ—Ä–Ω–∞—è —Å–µ—Ç–∫–∞', callback_data='size_setka'))
        caption_text = f"<b>{product.name}</b>\n"
        caption_text += f"<b>–¶–µ–Ω–∞:</b> {product.price}\n"
        if product.caption:
            caption_text += f"<i>{product.caption}</i>\n"
        caption_text += "\n<i>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å—Ç—Ä–µ–ª–æ—á–∫–∞–º–∏ ‚¨ÖÔ∏è‚û°Ô∏è</i>"
        await message.answer_photo(
            photo=product.photo or 'https://via.placeholder.com/300',
            caption=caption_text,
            reply_markup=builder.as_markup(),
            parse_mode='HTML'
        )

@router.callback_query(lambda c: c.data.startswith('prev_') or c.data.startswith('next_'))
async def paginate_products(callback: types.CallbackQuery, state: FSMContext):
    if callback.data.startswith('prev_'):
        page = max(0, int(callback.data.split('_')[1]) - 1)
    else:
        page = int(callback.data.split('_')[1]) + 1
    user_id = callback.from_user.id
    async with AsyncSessionLocal() as session:
        total_result = await session.execute(select(Product))
        total_products = total_result.scalars().all()
        total_count = len(total_products)
        if total_count == 0:
            await callback.answer('–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç')
            return
        if page < 0:
            page = total_count - 1
        if page >= total_count:
            page = 0
        result = await session.execute(select(Product).offset(page * PRODUCTS_PAGE_SIZE).limit(PRODUCTS_PAGE_SIZE))
        products = result.scalars().all()
        product = products[0]
        cart_result = await session.execute(select(Cart).where(Cart.user_id == user_id, Cart.product_id == product.id))
        in_cart = cart_result.scalar_one_or_none() is not None
        builder = InlineKeyboardBuilder()
        builder.button(text='‚¨ÖÔ∏è', callback_data=f'prev_{page}')
        if in_cart:
            builder.button(text='‚ùå', callback_data=f'remove_{product.id}_{page}')
        else:
            builder.button(text='‚úÖ', callback_data=f'add_{product.id}_{page}')
        builder.button(text='‚û°Ô∏è', callback_data=f'next_{page}')
        builder.adjust(3)
        builder.row(types.InlineKeyboardButton(text='–†–∞–∑–º–µ—Ä–Ω–∞—è —Å–µ—Ç–∫–∞', callback_data='size_setka'))
        caption_text = f"<b>{product.name}</b>\n"
        caption_text += f"<b>–¶–µ–Ω–∞:</b> {product.price}\n"
        if product.caption:
            caption_text += f"<i>{product.caption}</i>\n"
        caption_text += "\n<i>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å—Ç—Ä–µ–ª–æ—á–∫–∞–º–∏ ‚¨ÖÔ∏è‚û°Ô∏è</i>"
        media = types.InputMediaPhoto(
            media=product.photo or 'https://via.placeholder.com/300',
            caption=caption_text,
            parse_mode='HTML'
        )
        try:
            await callback.message.edit_media(media, reply_markup=builder.as_markup())
        except Exception as e:
            from aiogram.exceptions import TelegramBadRequest
            if isinstance(e, TelegramBadRequest) and 'message is not modified' in str(e):
                pass  # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            else:
                raise
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith('add_'))
async def add_to_cart(callback: types.CallbackQuery, state: FSMContext):
    product_id, page = callback.data.split('_')[1:]
    user_id = callback.from_user.id
    # –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –±–µ–∑ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    async with AsyncSessionLocal() as session:
        cart_item = Cart(
            user_id=user_id,
            product_id=int(product_id),
            size=None,
            quantity=1
        )
        session.add(cart_item)
        await session.commit()
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text='üõí –ö–æ—Ä–∑–∏–Ω–∞'), KeyboardButton(text='üõçÔ∏è –¢–æ–≤–∞—Ä—ã')]],
        resize_keyboard=True
    )
    await callback.message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!', reply_markup=kb)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith('size_') and c.data.endswith('_form'))
async def select_size_form(callback: types.CallbackQuery, state: FSMContext):
    _, size, _ = callback.data.split('_')
    if size not in AVAILABLE_SIZES:
        await callback.answer('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä!')
        return
    data = await state.get_data()
    async with AsyncSessionLocal() as session:
        cart_item = Cart(
            user_id=callback.from_user.id,
            product_id=data['product_id'],
            size=size,
            quantity=1
        )
        session.add(cart_item)
        await session.commit()
        product_result = await session.execute(select(Product).where(Product.id == data['product_id']))
        product = product_result.scalar_one_or_none()
        if product:
            add_order(
                user_id=callback.from_user.id,
                username=callback.from_user.username or '',
                product=product.name,
                size=size,
                color='',
                quantity=cart_item.quantity
            )
        await callback.message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É! –†–∞–∑–º–µ—Ä: {size.upper()}', reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
    await callback.answer()

@router.message(lambda msg: msg.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞')
async def show_cart(message: types.Message, state: FSMContext):
    page = 0
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Cart).where(Cart.user_id == message.from_user.id).offset(page * CART_PAGE_SIZE).limit(CART_PAGE_SIZE))
        cart_items = result.scalars().all()
        if not cart_items:
            await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
            return
        item = cart_items[0]
        product_result = await session.execute(select(Product).where(Product.id == item.product_id))
        product = product_result.scalar_one_or_none()
        if product:
            builder = InlineKeyboardBuilder()
            builder.button(text='‚¨ÖÔ∏è', callback_data=f'cart_prev_{page}')
            builder.button(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data=f'cart_del_{item.id}_{page}')
            builder.button(text='‚û°Ô∏è', callback_data=f'cart_next_{page}')
            builder.adjust(3)
            builder.row(types.InlineKeyboardButton(text='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='checkout'))
            caption_text = f"<b>{product.name}</b>\n"
            caption_text += f"<b>–†–∞–∑–º–µ—Ä:</b> {item.size or '–ù–µ –≤—ã–±—Ä–∞–Ω'}\n"
            caption_text += f"<b>–¶–≤–µ—Ç:</b> {item.color or '–ù–µ –≤—ã–±—Ä–∞–Ω'}\n"
            caption_text += f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {item.quantity}\n"
            caption_text += f"<b>–¶–µ–Ω–∞:</b> {product.price}\n"
            if product.caption:
                caption_text += f"<i>{product.caption}</i>"
            await message.answer_photo(
                photo=product.photo or 'https://via.placeholder.com/300',
                caption=caption_text,
                reply_markup=builder.as_markup(),
                parse_mode='HTML'
            )
# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –∫–æ—Ä–∑–∏–Ω—É
@router.callback_query(lambda c: c.data == 'checkout')
async def checkout_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(CartForm.fio)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:')
    await callback.answer()

@router.message(CartForm.fio)
async def checkout_fio(message: types.Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await state.set_state(CartForm.phone)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')

@router.message(CartForm.phone)
async def checkout_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    user_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Cart).where(Cart.user_id == user_id))
        cart_items = result.scalars().all()
        for item in cart_items:
            product_result = await session.execute(select(Product).where(Product.id == item.product_id))
            product = product_result.scalar_one_or_none()
            if product:
                add_order(
                    user_id=user_id,
                    username=message.from_user.username or '',
                    product=product.name,
                    size=item.size or '',
                    color=item.color or '',
                    quantity=item.quantity
                )
            await session.delete(item)
        await session.commit()
    await message.answer('–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.')
    await state.clear()

@router.callback_query(lambda c: c.data.startswith('cart_prev_') or c.data.startswith('cart_next_'))
async def paginate_cart(callback: types.CallbackQuery, state: FSMContext):
    if callback.data.startswith('cart_prev_'):
        page = max(0, int(callback.data.split('_')[2]) - 1)
    else:
        page = int(callback.data.split('_')[2]) + 1
    async with AsyncSessionLocal() as session:
        total_result = await session.execute(select(Cart).where(Cart.user_id == callback.from_user.id))
        total_items = total_result.scalars().all()
        total_count = len(total_items)
        if total_count == 0:
            await callback.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
            return
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è
        if page < 0:
            page = total_count - 1
        if page >= total_count:
            page = 0
        item = total_items[page]
        product_result = await session.execute(select(Product).where(Product.id == item.product_id))
        product = product_result.scalar_one_or_none()
        if product:
            builder = InlineKeyboardBuilder()
            builder.button(text='‚¨ÖÔ∏è', callback_data=f'cart_prev_{page}')
            builder.button(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data=f'cart_del_{item.id}_{page}')
            builder.button(text='‚û°Ô∏è', callback_data=f'cart_next_{page}')
            builder.adjust(3)
            caption_text = f"<b>{product.name}</b>\n"
            caption_text += f"<b>–†–∞–∑–º–µ—Ä:</b> {item.size}\n"
            caption_text += f"<b>–¶–≤–µ—Ç:</b> {item.color or '–ù–µ –≤—ã–±—Ä–∞–Ω'}\n"
            caption_text += f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {item.quantity}\n"
            caption_text += f"<b>–¶–µ–Ω–∞:</b> {product.price}\n"
            if product.caption:
                caption_text += f"<i>{product.caption}</i>"
            media = types.InputMediaPhoto(
                media=product.photo or 'https://via.placeholder.com/300',
                caption=caption_text,
                parse_mode='HTML'
            )
            await callback.message.edit_media(media, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith('cart_del_'))
async def cart_del(callback: types.CallbackQuery, state: FSMContext):
    cart_id, page = callback.data.split('_')[2:]
    async with AsyncSessionLocal() as session:
        cart_item = await session.get(Cart, int(cart_id))
        if cart_item:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Google Sheets
            product_result = await session.execute(select(Product).where(Product.id == cart_item.product_id))
            product = product_result.scalar_one_or_none()
            if product:
                remove_order(
                    user_id=cart_item.user_id,
                    product=product.name,
                    size=cart_item.size,
                    color=cart_item.color or ''
                )
            await session.delete(cart_item)
            await session.commit()
            await callback.message.answer('–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.')
    await show_cart(callback.message, state)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith('size_setka'))
async def show_size_setka(callback: types.CallbackQuery):
    from database.db import AsyncSessionLocal
    from database.models import SizeSetka
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(SizeSetka).order_by(SizeSetka.created_at.desc()))
        setka = result.scalars().first()
        if setka:
            kb = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data='prev_0'), types.InlineKeyboardButton(text='‚û°Ô∏è', callback_data='next_0')],
                    [types.InlineKeyboardButton(text='–†–∞–∑–º–µ—Ä–Ω–∞—è —Å–µ—Ç–∫–∞', callback_data='size_setka')]
                ]
            )
            await callback.message.edit_media(
                types.InputMediaPhoto(
                    media=setka.photo,
                    caption='<b>–°–µ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤</b>',
                    parse_mode='HTML'
                ),
                reply_markup=kb
            )
        else:
            await callback.answer('–°–µ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞')

@router.callback_query(lambda c: c.data.startswith('remove_'))
async def confirm_remove(callback: types.CallbackQuery):
    product_id, page = callback.data.split('_')[1:]
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='–î–∞', callback_data=f'confirm_remove_{product_id}_{page}'),
             types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data=f'cancel_remove_{product_id}_{page}')]
        ]
    )
    await callback.message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?', reply_markup=kb)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith('confirm_remove_'))
async def remove_from_cart(callback: types.CallbackQuery):
    product_id, page = callback.data.split('_')[2:]
    user_id = callback.from_user.id
    async with AsyncSessionLocal() as session:
        cart_result = await session.execute(select(Cart).where(Cart.user_id == user_id, Cart.product_id == int(product_id)))
        cart_item = cart_result.scalar_one_or_none()
        if cart_item:
            await session.delete(cart_item)
            await session.commit()
            # Google Sheets
            product_result = await session.execute(select(Product).where(Product.id == int(product_id)))
            product = product_result.scalar_one_or_none()
            if product:
                remove_order(
                    user_id=user_id,
                    product=product.name,
                    size=cart_item.size,
                    color=cart_item.color or ''
                )
            await callback.message.answer('–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.')
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith('cancel_remove_'))
async def cancel_remove(callback: types.CallbackQuery):
    await callback.message.answer('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    await callback.answer()

