import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from database.db import AsyncSessionLocal
from database.models import User
from database.orders import Order, OrderItem
from sqlalchemy import select
from aiogram.utils.markdown import hbold, hitalic, hcode
@dp.message(Command('get_nahui'))
async def get_nahui(message: types.Message):
    # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if message.from_user.id not in ADMIN_IDS:
        await message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        return
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
        result = await session.execute(select(OrderItem.product_name).distinct())
        product_names = [row[0] for row in result.fetchall()]
        if not product_names:
            await message.answer('–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.')
            return
        messages = []
        for product_name in product_names:
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
            result = await session.execute(
                select(OrderItem, Order)
                .join(Order, OrderItem.order_id == Order.id)
                .where(OrderItem.product_name == product_name)
                .order_by(OrderItem.size, Order.created_at)
            )
            rows = result.fetchall()
            if not rows:
                continue
            text = f"{hbold(product_name)}:\n"
            for idx, (item, order) in enumerate(rows, 1):
                username = f"@{order.username}" if order.username else hitalic('–±–µ–∑ username')
                size = item.size or hitalic('–±–µ–∑ —Ä–∞–∑–º–µ—Ä–∞')
                text += f"{idx}. {username}, {hcode(size)}\n"
            messages.append(text)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ
        max_len = 3500
        buf = ''
        for part in messages:
            if len(buf) + len(part) > max_len:
                await message.answer(buf, parse_mode='HTML')
                buf = ''
            buf += part + '\n'
        if buf:
            await message.answer(buf, parse_mode='HTML')
from dotenv import load_dotenv
import os
from handlers.products import router as products_router
from handlers.admin import router as admin_router

load_dotenv()

API_TOKEN = os.getenv('TOKEN')
DATABASE_URL = os.getenv('DB_URL')
ADMIN_IDS = [int(i) for i in os.getenv('ADMIN', '').split(',') if i]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
dp.include_router(products_router)
dp.include_router(admin_router)

@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or ''
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.id == user_id))
        user = result.scalar_one_or_none()
        if not user:
            user = User(id=user_id, username=username)
            session.add(user)
            await session.commit()
    text = (
        '‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ</b>\n\n'
        '–í —ç—Ç–æ–º —á–∞—Ç-–±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å <b>–ø—Ä–µ–¥–∑–∞–∫–∞–∑</b> –Ω–∞ –º–µ—Ä—á —Ñ–µ—Å—Ç–∏–≤–∞–ª—è ¬´–í—Å–ø—ã—à–∫–∞¬ª.\n'
        '–î–æ–±–∞–≤–∏–≤ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, –≤—ã –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –≤–∞–º –ø—Ä–∏–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É.\n\n'
        '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–¢–æ–≤–∞—Ä—ã</b> –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç—Ä–µ–ª–æ—á–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è.\n\n'
        '–í–æ–ø—Ä–æ—Å <b>–¥–æ—Å—Ç–∞–≤–∫–∏</b> –±—É–¥–µ—Ç —Ä–µ—à–∞—Ç—å—Å—è –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: –ª–∏–±–æ —Å–∞–º–æ–≤—ã–≤–æ–∑, –ª–∏–±–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.\n\n'
        '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @yanejettt\n'
        '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∑–∞–∫–∞–∑–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @shamonova_a'
    )
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üõí –ö–æ—Ä–∑–∏–Ω–∞'), KeyboardButton(text='üõçÔ∏è –¢–æ–≤–∞—Ä—ã'), KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É')]
        ],
        resize_keyboard=True
    )
    await message.answer(text, reply_markup=kb, parse_mode='HTML')

if __name__ == '__main__':
    print("—Ä–∞–±–æ—Ç–∞–µ—Ç")
    dp.run_polling(bot)
